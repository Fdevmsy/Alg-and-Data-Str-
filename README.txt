Question1

// multiplyt the Math.random() by (1.0-goodness). So if goodness == 0, it's prefect shuffle. 

int rand = (int)(Math.random()*(i+1)*(1.0-goodness));



Question2
* time unit is nanosecond
// test1 
a = 10  b = 20
total times 556204
total times 65760
total times 54636
total times 108541
total times 109305
total times 52396
total times 52233
total times 43462
total times 74360
total times 534371
total times 126183
total times 45350
total times 45326
total times 64602
total times 65272
total times 70168
total times 61583
total times 62203
total times 43985
total times 35832
total times 35262
total times 46818
total times 33329
total times 42035
total times 30426
total times 35392
total times 26222
total times 31208
total times 31259
total times 25552
total times 21823
total times 24512
total times 24577
total times 23957
total times 22438
total times 38684
total times 19411
total times 26882
total times 22496
total times 18822
total times 46102
total times 18430
total times 17858
total times 21316
total times 18078
total times 18184
total times 22720
total times 20235
total times 21478
total times 16609
total times 23699
total times 16592
total times 14554
total times 15427
total times 19235
total times 13300
total times 14378
total times 15332
total times 14766
total times 17477
total times 16622
total times 13215
total times 16964
total times 19888
total times 14161
total times 12432
total times 12834
total times 15458
total times 12191
total times 14685
total times 15981
total times 13529
total times 12497
total times 12891
total times 12320
total times 15325
total times 12430
total times 42670
total times 21248
total times 13540
total times 12117
total times 23457
total times 13878
total times 42391
total times 31542
total times 13771
total times 17688
total times 13351
total times 11857
total times 15075
total times 13451
total times 21207
total times 13280
total times 15436
total times 15938
total times 17372
total times 12191
total times 11356
total times 13444
total times 33933

//test2
a = 100  b = 1000
total times 2374859
total times 546619
total times 502713
total times 484636
total times 286062
total times 260901
total times 412018
total times 424037
total times 1034614
total times 395227
total times 423732
total times 356894
total times 409624
total times 364902
total times 408683
total times 405743
total times 352000
total times 339245
total times 313356
total times 338189
total times 312004
total times 320779
total times 334760
total times 312282
total times 281511
total times 292118
total times 283124
total times 278450
total times 272642
total times 257289
total times 250296
total times 162314
total times 205946
total times 230767
total times 290446
total times 296162
total times 355899
total times 796720
total times 186386
total times 186148
total times 268324
total times 178859
total times 138642
total times 161596
total times 169787
total times 130470
total times 152395
total times 216514
total times 239144
total times 279000
total times 102851
total times 96078
total times 89876
total times 94360
total times 162813
total times 145914
total times 149147
total times 113620
total times 157384
total times 150516
total times 183898
total times 165540
total times 165376
total times 163284
total times 92603
total times 88913
total times 86059
total times 85371
total times 89998
total times 86929
total times 84997
total times 90438
total times 89379
total times 88878
total times 85848
total times 90464
total times 88049
total times 91197
total times 87178
total times 88886
total times 97281
total times 86311
total times 88850
total times 109519
total times 87194
total times 117027
total times 85720
total times 88515
total times 88795
total times 96475
total times 86971
total times 90250
total times 84997
total times 88661
total times 86767
total times 147479
total times 128886
total times 91031
total times 90992
total times 111164

//test3
a = 50  b = 200
total times 1523947
total times 451799
total times 415970
total times 376897
total times 323173
total times 222117
total times 179323
total times 165932
total times 222192
total times 183473
total times 163096
total times 147494
total times 142465
total times 137564
total times 131075
total times 145146
total times 111562
total times 96176
total times 105581
total times 99718
total times 117834
total times 89877
total times 94326
total times 156947
total times 97921
total times 87498
total times 121852
total times 94114
total times 95404
total times 92936
total times 104549
total times 101194
total times 91943
total times 85407
total times 90984
total times 90850
total times 95755
total times 86477
total times 88358
total times 87728
total times 94244
total times 92115
total times 90168
total times 130062
total times 90360
total times 116194
total times 97186
total times 88085
total times 84716
total times 109334
total times 85739
total times 88020
total times 88388
total times 85018
total times 84447
total times 84504
total times 85483
total times 86551
total times 88691
total times 81309
total times 90744
total times 165357
total times 125038
total times 89062
total times 82398
total times 82774
total times 82435
total times 80133
total times 100783
total times 84695
total times 106171
total times 78863
total times 73533
total times 201978
total times 79767
total times 80860
total times 86169
total times 80953
total times 132526
total times 73376
total times 81087
total times 78022
total times 1864661
total times 107151
total times 94196
total times 71187
total times 74455
total times 69227
total times 65953
total times 74860
total times 115711
total times 74760
total times 84834
total times 68243
total times 69161
total times 83480
total times 73040
total times 71579
total times 65077
total times 102922

// If there are k lists, we can just add items in those lists to the map and count only the ones with value=1;  I think the running time would be the same. 


Question3

1. running time: O(1)
2. created another stack to store the max number
3. yes, it improves the running time from O(n) to O(1);
4. yes, we can use a variable instead of a stack to store the Difference between the new item and currently the max value. And we store Sn - Max(Sn-1, Sn-2... S1, S0) in the stack. If the max value are popped, we can get the new max value by (Old-Max - popped value). 